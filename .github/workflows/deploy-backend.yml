name: Deploy Backend to EKS

on:
  push:
    branches:
      - main

env:
  EKS_CLUSTER_NAME: Backend-cluster
  AWS_REGION: us-east-1
  BACKEND_DOMAIN: poc-api.autovrse.app
  ECR_REPOSITORY: backend-app
  IMAGE_TAG: latest
  K8S_NAMESPACE: default

jobs:
  deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.29.0

    - name: Update Kubeconfig
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Create Kubernetes ConfigMap with configuration.json
      run: |
        echo '${{ secrets.CONFIGURATION_JSON }}' > configuration.json
        kubectl delete configmap backend-config --ignore-not-found
        kubectl create configmap backend-config --from-file=configuration.json

    - name: Deploy to EKS using kubectl
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: backend-deployment
          namespace: $K8S_NAMESPACE
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: backend
          template:
            metadata:
              labels:
                app: backend
            spec:
              containers:
              - name: backend
                image: $IMAGE
                ports:
                - containerPort: 5000
                volumeMounts:
                - name: config-volume
                  mountPath: /app/configuration.json
                  subPath: configuration.json
              volumes:
              - name: config-volume
                configMap:
                  name: backend-config
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: backend-service
          namespace: $K8S_NAMESPACE
        spec:
          selector:
            app: backend
          ports:
            - protocol: TCP
              port: 80
              targetPort: 5000
          type: ClusterIP
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: backend-ingress
          namespace: $K8S_NAMESPACE
          annotations:
            kubernetes.io/ingress.class: nginx
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
        spec:
          tls:
          - hosts:
            - $BACKEND_DOMAIN
            secretName: backend-tls
          rules:
          - host: $BACKEND_DOMAIN
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: backend-service
                    port:
                      number: 80
        EOF
