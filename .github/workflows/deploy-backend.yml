name: Backend EKS Deployment

on:
  workflow_dispatch:
    inputs:
      eks_cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: backend
  DOCKERFILE_PATH: ./vrse-builder-backend-main/Dockerfile
  CONTEXT_PATH: ./vrse-builder-backend-main
  DEPLOYMENT_FILE: backend-deployment.yaml
  SERVICE_FILE: backend-service.yaml

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # âœ… Install tools
      - name: Install eksctl & kubectl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      # âœ… Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # âœ… Attach ECR Permissions
      - name: Attach ECR Policy to IAM User
        run: |
          USER_NAME="github-actions-user-backend"
          POLICY="AmazonEC2ContainerRegistryFullAccess"

          if ! aws iam list-attached-user-policies --user-name "$USER_NAME" | grep -q "$POLICY"; then
            aws iam attach-user-policy \
              --user-name "$USER_NAME" \
              --policy-arn arn:aws:iam::aws:policy/$POLICY
            echo "âœ… Attached $POLICY to $USER_NAME"
          else
            echo "ðŸ”¹ $POLICY already attached."
          fi

      # âœ… Create or Get ECR Repository
      - name: Create/Get ECR Repository
        run: |
          aws ecr describe-repositories --repository-names $IMAGE_NAME || \
          aws ecr create-repository --repository-name $IMAGE_NAME
          echo "âœ… ECR repository ready."

      # âœ… Login to ECR
      - name: Docker login to ECR
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # âœ… Build & Push Docker Image
      - name: Build and Push Docker image
        run: |
          IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:${GITHUB_SHA::7}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

          docker build -f $DOCKERFILE_PATH -t $IMAGE_URI $CONTEXT_PATH
          docker push $IMAGE_URI

      # âœ… Check or create EKS cluster
      - name: Check/Create EKS Cluster
        run: |
          CLUSTER_NAME="${{ github.event.inputs.eks_cluster_name }}"
          REGION="${{ env.AWS_REGION }}"

          echo "Checking if cluster $CLUSTER_NAME exists..."
          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "âœ… Cluster $CLUSTER_NAME already exists."
          else
            echo "ðŸš€ Creating EKS cluster $CLUSTER_NAME..."
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed
          fi

      # âœ… Generate kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ github.event.inputs.eks_cluster_name }} \
            --region ${{ env.AWS_REGION }}

      # âœ… Deploy backend to EKS
      - name: Deploy Backend
        run: |
          sed -i "s|image: .*|image: $IMAGE_URI|" $DEPLOYMENT_FILE
          kubectl apply -f $DEPLOYMENT_FILE
          kubectl apply -f $SERVICE_FILE

      # âœ… Verify rollout
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/backend-deployment
