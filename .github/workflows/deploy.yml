name: AWS Infrastructure Setup

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client Name (used for key pair)'
        required: true
        type: string
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - t3.micro
          - t3.small
          - t3.medium
          - t3.large
      instance_name:
        description: 'EC2 Instance Name Tag'
        required: true
        default: 'CodeDeploy-Instance'
        type: string
      domain_name:
        description: 'Domain name pointing to Elastic IP'
        required: true
        type: string
      email:
        description: 'Email for SSL certificate registration'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  EC2_ROLE_NAME: EC2-CodeDeploy-Role
  CODEDEPLOY_ROLE_NAME: CodeDeploy-Service-Role
  SECURITY_GROUP_NAME: CodeDeploy-Security-Group

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure VPC and subnet
      id: ensure-default
      run: |
        DEFAULT_VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || true)
        if [ "$DEFAULT_VPC_ID" = "None" ] || [ -z "$DEFAULT_VPC_ID" ]; then
          DEFAULT_VPC_ID=$(aws ec2 create-default-vpc --query 'Vpc.VpcId' --output text)
        fi

        SUBNET_ID=$(aws ec2 describe-subnets \
          --filters "Name=vpc-id,Values=$DEFAULT_VPC_ID" "Name=default-for-az,Values=true" \
          --query 'Subnets[0].SubnetId' --output text 2>/dev/null || true)

        if [ "$SUBNET_ID" = "None" ] || [ -z "$SUBNET_ID" ]; then
          AZ=$(aws ec2 describe-availability-zones --region ${AWS_REGION} --query "AvailabilityZones[0].ZoneName" --output text)
          SUBNET_ID=$(aws ec2 create-default-subnet --availability-zone "$AZ" --query 'Subnet.SubnetId' --output text)
        fi

        echo "DEFAULT_VPC_ID=$DEFAULT_VPC_ID" >> $GITHUB_OUTPUT
        echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_OUTPUT

    - name: Create IAM role and instance profile
      id: ec2-role
      run: |
        cat > ec2-trust-policy.json <<EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ec2.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF

        if ! aws iam get-role --role-name ${{ env.EC2_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-role \
            --role-name ${{ env.EC2_ROLE_NAME }} \
            --assume-role-policy-document file://ec2-trust-policy.json
          aws iam attach-role-policy --role-name ${{ env.EC2_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess
        fi

        if ! aws iam get-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }}
        fi

        aws iam add-role-to-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} --role-name ${{ env.EC2_ROLE_NAME }} || true

        PROFILE_ARN=$(aws iam get-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} --query 'InstanceProfile.Arn' --output text)
        echo "PROFILE_ARN=$PROFILE_ARN" >> $GITHUB_OUTPUT

    - name: Create Security Group
      id: create-sg
      run: |
        VPC_ID="${{ steps.ensure-default.outputs.DEFAULT_VPC_ID }}"
        SG_ID=$(aws ec2 create-security-group \
          --group-name ${{ env.SECURITY_GROUP_NAME }} \
          --description "Allow 22 80 443 5000 3000" \
          --vpc-id $VPC_ID --query 'GroupId' --output text)

        for PORT in 22 80 443 3000 5000; do
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port $PORT --cidr 0.0.0.0/0
        done

        echo "SECURITY_GROUP_ID=$SG_ID" >> $GITHUB_OUTPUT

    - name: Create EC2 key pair
      id: create-key
      run: |
        KEY_NAME="${{ github.event.inputs.client_name }}-key-$(date +%s)"
        aws ec2 create-key-pair --key-name "$KEY_NAME" \
          --query 'KeyMaterial' --output text > "${KEY_NAME}.pem"
        chmod 400 "${KEY_NAME}.pem"
        echo "KEY_NAME=$KEY_NAME" >> $GITHUB_OUTPUT

    - name: Upload private key
      uses: actions/upload-artifact@v4
      with:
        name: ec2-private-key
        path: ${{ steps.create-key.outputs.KEY_NAME }}.pem

    - name: Get latest Ubuntu AMI
      id: get-ami
      run: |
        AMI_ID=$(aws ec2 describe-images \
          --owners 099720109477 \
          --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
          --query 'Images|sort_by(@, &CreationDate)[-1].ImageId' \
          --output text)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT

    - name: Launch EC2 with NGINX and Environment
      id: launch-instance
      run: |
        cat > user-data.sh <<EOF
        #!/bin/bash
        apt update
        apt install -y nginx

        cat <<'ENV' >> /etc/profile
        export PORT=5000
        export NODE_ENV=production
        export DB_SSL_CA_FILE=global-bundle.pem
        export APP_JWT_KEY=3D37bUIX9I3a5g8jE1
        export JWT_KEY_FOR_INVITE=3D37bUIX9I3a5gLo012
        export WEB_DOMAIN=https://poc.autovrse-training.com
        export APP_DOMAIN=https://poc-api.autovrse.app
        export SEND_IN_BLUE_USER=devops.admin@autovrse-training.com
        export SEND_IN_BLUE_KEY=b3H2MdyBfrAtg7xD
        export EMAIL_SENDER=noreply@autovrse-training.com
        export PRODUCT_ADMIN_USERNAME=admin@autovrse.in
        export PRODUCT_ADMIN_PASSWORD=admin
        export PRODUCT_ADMIN_EMAIL=kaushal.panchal@autovrse.in
        export APP_DB=mongodb://localhost:27017/vrseBuilder
        export MONGODB_USER=admin
        export MONGODB_PASSWORD=admin
        export MONGODB_HOST=localhost
        export MONGODB_PORT=27017
        export MONGODB_DB_NAME=vrseBuilder
        export ZENDESK_API_TOKEN=random
        export NODE_EMAIL_PASS=Loy186481
        export NODE_EMAIL_USER=no-reply@autovrse.in
        export DASHBOARD_URL=https://poc.autovrse-training.com
        ENV

        source /etc/profile

        tee /etc/nginx/sites-available/default > /dev/null <<'NGINX'
        server {
            listen 80 default_server;
            listen [::]:80 default_server;

            server_name ${{ github.event.inputs.domain_name }};
            client_max_body_size 30M;

            location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;

                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
        NGINX

        nginx -t && systemctl restart nginx
        EOF

        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ steps.get-ami.outputs.AMI_ID }} \
          --count 1 \
          --instance-type ${{ github.event.inputs.instance_type }} \
          --key-name ${{ steps.create-key.outputs.KEY_NAME }} \
          --subnet-id ${{ steps.ensure-default.outputs.SUBNET_ID }} \
          --security-group-ids ${{ steps.create-sg.outputs.SECURITY_GROUP_ID }} \
          --iam-instance-profile Arn=${{ steps.ec2-role.outputs.PROFILE_ARN }} \
          --user-data file://user-data.sh \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ github.event.inputs.instance_name }}}]" \
          --query 'Instances[0].InstanceId' --output text)

        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT
        aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"

    - name: Allocate and assign Elastic IP
      id: allocate-eip
      run: |
        ALLOC_ID=$(aws ec2 allocate-address --domain vpc --query 'AllocationId' --output text)
        PUBLIC_IP=$(aws ec2 describe-addresses --allocation-ids "$ALLOC_ID" --query 'Addresses[0].PublicIp' --output text)
        aws ec2 associate-address \
          --instance-id "${{ steps.launch-instance.outputs.INSTANCE_ID }}" \
          --allocation-id "$ALLOC_ID"
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_OUTPUT

    - name: Output Summary
      run: |
        echo "‚úÖ Instance ID: ${{ steps.launch-instance.outputs.INSTANCE_ID }}"
        echo "üåê Public IP:   ${{ steps.allocate-eip.outputs.PUBLIC_IP }}"
        echo "::notice title=Next Step::Map '${{ github.event.inputs.domain_name }}' A-record to ${{ steps.allocate-eip.outputs.PUBLIC_IP }}"
