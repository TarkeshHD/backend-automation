name: Backend Deployment to EKS

on:
  workflow_dispatch:
    inputs:
      eks_cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: backend
  DOCKERFILE_PATH: ./vrse-builder-backend-main/Dockerfile
  CONTEXT_PATH: ./vrse-builder-backend-main
  DEPLOYMENT_FILE: backend-deployment.yaml
  SERVICE_FILE: backend-service.yaml

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # âœ… Checkout repository
      - name: Checkout
        uses: actions/checkout@v3

      # âœ… Install AWS CLI
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      # âœ… Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # âœ… Attach IAM policies for EKS access
      - name: Attach EKS IAM Policies
        run: |
          USER_NAME="github-actions-user-backend"
          POLICIES=(
            "AmazonEKSClusterPolicy"
            "AmazonEKSWorkerNodePolicy"
            "AmazonEKS_CNI_Policy"
            "AmazonEC2ContainerRegistryFullAccess"
            "IAMFullAccess"
            "AmazonEC2FullAccess"
          )

          for POLICY in "${POLICIES[@]}"; do
            if ! aws iam list-attached-user-policies --user-name "$USER_NAME" | grep -q "$POLICY"; then
              aws iam attach-user-policy \
                --user-name "$USER_NAME" \
                --policy-arn arn:aws:iam::aws:policy/$POLICY
              echo "âœ… Attached $POLICY"
            else
              echo "ðŸ”¹ $POLICY already attached."
            fi
          done

      # âœ… Ensure ECR repository exists
      - name: Create ECR repository if not exists
        run: |
          if ! aws ecr describe-repositories --repository-names $IMAGE_NAME >/dev/null 2>&1; then
            aws ecr create-repository --repository-name $IMAGE_NAME
            echo "âœ… Created ECR repository $IMAGE_NAME"
          else
            echo "ðŸ”¹ ECR repository $IMAGE_NAME already exists."
          fi

      # âœ… Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # âœ… Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          ECR_IMAGE="${{ steps.login-ecr.outputs.registry }}/${IMAGE_NAME}:${GITHUB_SHA::7}"
          echo "ECR_IMAGE=$ECR_IMAGE" >> $GITHUB_ENV
          docker build -f $DOCKERFILE_PATH -t $ECR_IMAGE $CONTEXT_PATH
          docker push $ECR_IMAGE

      # âœ… Update kubeconfig
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --name "${{ github.event.inputs.eks_cluster_name }}" \
            --region $AWS_REGION

      # âœ… Deploy backend
      - name: Deploy Backend to EKS
        run: |
          sed -i "s|image: .*|image: $ECR_IMAGE|" $DEPLOYMENT_FILE
          kubectl apply -f $DEPLOYMENT_FILE
          kubectl apply -f $SERVICE_FILE

      # âœ… Verify rollout
      - name: Verify Deployment Rollout
        run: |
          kubectl rollout status deployment/backend-deployment
