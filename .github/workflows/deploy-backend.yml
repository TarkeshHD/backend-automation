name: Deploy Backend to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name Backend-cluster --region us-east-1

      - name: Deploy backend manifests
        run: |
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yml
          kubectl apply -f backend-ingress.yml

      # ✅ Wait for DNS propagation
      - name: Wait for DNS propagation
        run: |
          DOMAIN="backend.example.com"
          echo "Waiting for DNS to propagate for $DOMAIN ..."
          for i in {1..30}; do
            if nslookup $DOMAIN 8.8.8.8; then
              echo "✅ DNS resolved!"
              break
            fi
            echo "⏳ Still waiting..."
            sleep 20
          done

      # ✅ Install cert-manager
      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.0/cert-manager.crds.yaml
          kubectl create namespace cert-manager || true
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --version v1.15.0

      # ✅ Create ClusterIssuer for Let's Encrypt
      - name: Create ClusterIssuer
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: your-email@example.com
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
              - http01:
                  ingress:
                    class: nginx
          EOF

      # ✅ Create Certificate for backend
      - name: Create Certificate
        run: |
          DOMAIN="backend.example.com"
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: backend-cert
            namespace: default
          spec:
            secretName: backend-cert-tls
            issuerRef:
              name: letsencrypt-prod
              kind: ClusterIssuer
            commonName: $DOMAIN
            dnsNames:
              - $DOMAIN
          EOF

      # ✅ Wait until certificate becomes ready
      - name: Wait for certificate readiness
        run: |
          CERT_NAME="backend-tls"
          NAMESPACE="default"
          echo "Waiting for certificate $CERT_NAME in $NAMESPACE ..."
          for i in {1..30}; do
            STATUS=$(kubectl get certificate $CERT_NAME -n $NAMESPACE -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "False")
            if [ "$STATUS" == "True" ]; then
              echo "✅ Certificate is ready!"
              break
            fi
            echo "⏳ Certificate not ready yet..."
            sleep 20
          done

      # ✅ Output backend URL
      - name: Get Backend URL
        id: geturl
        run: |
          DOMAIN="poc-api.autovrse.app"
          echo "Backend URL: https://$DOMAIN"
          echo "backend_url=https://$DOMAIN" >> $GITHUB_OUTPUT

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash


      - name: Print Backend URL
        run: echo "✅ Your backend is live at ${{ steps.geturl.outputs.backend_url }}"
