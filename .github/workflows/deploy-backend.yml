name: Deploy Backend to EKS with HTTPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest

    env:
      ECR_REPOSITORY: backend-automation
      CLUSTER_NAME: Backend-cluster
      REGION: ap-south-1
      DEPLOYMENT_NAME: backend-deployment
      NAMESPACE: default
      DOMAIN: poc-api.autovrse.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
        working-directory: ./vrse-builder-backend-main

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME

      - name: Create backend deployment and service
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: $DEPLOYMENT_NAME
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: backend
            template:
              metadata:
                labels:
                  app: backend
              spec:
                containers:
                - name: backend
                  image: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: production
                  - name: MONGO_URI
                    value: mongodb://mongodb-service:27017/vrse
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: backend-service
          spec:
            selector:
              app: backend
            ports:
              - protocol: TCP
                port: 80
                targetPort: 3000
            type: ClusterIP
          EOF

      - name: Create Ingress with TLS
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: backend-ingress
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
            tls:
            - hosts:
              - $DOMAIN
              secretName: backend-tls
            rules:
            - host: $DOMAIN
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: backend-service
                      port:
                        number: 80
          EOF
