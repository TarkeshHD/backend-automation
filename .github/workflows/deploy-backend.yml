name: Backend Deployment

on:
  workflow_dispatch:
    inputs:
      eks_cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: backend
  DOCKERFILE_PATH: ./vrse-builder-backend-main/Dockerfile
  CONTEXT_PATH: ./vrse-builder-backend-main
  DEPLOYMENT_FILE: backend-deployment.yaml
  SERVICE_FILE: backend-service.yaml

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # âœ… Check and install AWS CLI only if not installed
      - name: Ensure AWS CLI is installed
        run: |
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "âœ… AWS CLI already installed: $(aws --version)"
          fi

      # âœ… Attach ECR policy
      - name: Attach ECR Policy
        run: |
          USER_NAME="github-actions-user-backend"
          POLICY="AmazonEC2ContainerRegistryFullAccess"

          echo "Checking ECR policy for $USER_NAME..."
          if ! aws iam list-attached-user-policies --user-name "$USER_NAME" | grep -q "$POLICY"; then
            aws iam attach-user-policy \
              --user-name "$USER_NAME" \
              --policy-arn arn:aws:iam::aws:policy/$POLICY
            echo "âœ… Attached $POLICY to $USER_NAME"
          else
            echo "ðŸ”¹ $POLICY already attached."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      # âœ… Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # âœ… Create/Get ECR repository
      - name: Create/Get ECR Repository
        run: |
          aws ecr describe-repositories --repository-names $IMAGE_NAME || \
          aws ecr create-repository --repository-name $IMAGE_NAME
          echo "âœ… ECR repository ready."

      # âœ… Docker login to ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      # âœ… Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          ECR_IMAGE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}:${GITHUB_SHA::7}"
          echo "ECR_IMAGE=$ECR_IMAGE" >> $GITHUB_ENV

          docker build -f $DOCKERFILE_PATH -t $ECR_IMAGE $CONTEXT_PATH
          docker push $ECR_IMAGE
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      # âœ… Install kubectl and eksctl
      - name: Install tools
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      # âœ… Update kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name "${{ github.event.inputs.eks_cluster_name }}" \
            --region $AWS_REGION

      # âœ… Update image in Deployment YAML
      - name: Update Kubernetes Deployment
        run: |
          sed -i "s|image: .*|image: ${ECR_IMAGE}|" $DEPLOYMENT_FILE

      # âœ… Deploy to Kubernetes
      - name: Apply Kubernetes Files
        run: |
          kubectl apply -f $DEPLOYMENT_FILE
          kubectl apply -f $SERVICE_FILE

      # âœ… Verify deployment
      - name: Verify Rollout
        run: |
          kubectl rollout status deployment/backend-deployment
