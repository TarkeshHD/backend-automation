name: AWS Infrastructure Setup

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client Name (used for key pair)'
        required: true
        type: string
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - t3.micro
          - t3.small
          - t3.medium
          - t3.large
      instance_name:
        description: 'EC2 Instance Name Tag'
        required: true
        default: 'CodeDeploy-Instance'
        type: string
      domain_name:
        description: 'Domain name pointing to Elastic IP'
        required: true
        type: string
      email:
        description: 'Email for SSL certificate registration'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  EC2_ROLE_NAME: EC2-CodeDeploy-Role
  CODEDEPLOY_ROLE_NAME: CodeDeploy-Service-Role
  SECURITY_GROUP_NAME: CodeDeploy-Security-Group

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # IAM Role for EC2
    - name: Create EC2 IAM Role and Instance Profile
      id: ec2-role
      run: |
        cat > ec2-trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ec2.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
        if ! aws iam get-role --role-name ${{ env.EC2_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-role \
            --role-name ${{ env.EC2_ROLE_NAME }} \
            --assume-role-policy-document file://ec2-trust-policy.json \
            --description "IAM role for EC2 instances to work with CodeDeploy"
          aws iam attach-role-policy --role-name ${{ env.EC2_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
          aws iam attach-role-policy --role-name ${{ env.EC2_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/AmazonEC2RoleforAWSCodeDeploy
        fi
        if ! aws iam get-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }}
        fi
        ATTACHED_ROLE=$(aws iam get-instance-profile \
          --instance-profile-name ${{ env.EC2_ROLE_NAME }} \
          --query 'InstanceProfile.Roles[0].RoleName' \
          --output text 2>/dev/null || echo "None")
        if [ "$ATTACHED_ROLE" != "${{ env.EC2_ROLE_NAME }}" ]; then
          aws iam add-role-to-instance-profile \
            --instance-profile-name ${{ env.EC2_ROLE_NAME }} \
            --role-name ${{ env.EC2_ROLE_NAME }}
        fi
        PROFILE_ARN=$(aws iam get-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} --query 'InstanceProfile.Arn' --output text)
        echo "PROFILE_ARN=$PROFILE_ARN" >> $GITHUB_OUTPUT

    # Security Group
    - name: Create Security Group
      id: create-sg
      run: |
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query 'Vpcs[0].VpcId' --output text)
        EXISTING_SG=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=${{ env.SECURITY_GROUP_NAME }}" \
          --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
        if [ "$EXISTING_SG" != "None" ] && [ "$EXISTING_SG" != "" ]; then
          echo "SECURITY_GROUP_ID=$EXISTING_SG" >> $GITHUB_OUTPUT
        else
          SG_ID=$(aws ec2 create-security-group \
            --group-name ${{ env.SECURITY_GROUP_NAME }} \
            --description "SG for CodeDeploy" \
            --vpc-id $VPC_ID \
            --query 'GroupId' --output text)
          for PORT in 22 80 443 27017; do
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port $PORT --cidr 0.0.0.0/0
          done
          echo "SECURITY_GROUP_ID=$SG_ID" >> $GITHUB_OUTPUT
        fi

    # Key Pair
    - name: Create EC2 Key Pair
      id: create-key
      run: |
        KEY_NAME="${{ github.event.inputs.client_name }}-key-$(date +%s)"
        aws ec2 create-key-pair \
          --key-name "$KEY_NAME" \
          --query 'KeyMaterial' \
          --output text > "${KEY_NAME}.pem"
        chmod 400 "${KEY_NAME}.pem"
        echo "KEY_NAME=$KEY_NAME" >> $GITHUB_OUTPUT
      shell: bash

    - name: Upload Private Key Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ec2-private-key
        path: ${{ steps.create-key.outputs.KEY_NAME }}.pem

    # Get Ubuntu AMI
    - name: Get Latest Ubuntu AMI
      id: get-ami
      run: |
        AMI_ID=$(aws ec2 describe-images \
          --owners 099720109477 \
          --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
          --query 'Images|sort_by(@, &CreationDate)[-1].ImageId' \
          --output text)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT

    # Launch EC2 Instance (cloud-init + app stack)
    - name: Launch EC2 Instance
      id: launch-instance
      env:
        GH_USERNAME: ${{ secrets.GH_USERNAME }}
        GH_PAT: ${{ secrets.GH_PAT }}
        DOMAIN_NAME: ${{ github.event.inputs.domain_name }}
        EMAIL: ${{ github.event.inputs.email }}
      run: |
        cat > user-data.sh << 'EOF'
        #!/bin/bash

        # Set environment variables (persist for all shells)
        echo 'export ENV_VAR1="val1"' | sudo tee -a /etc/profile
        echo 'export ENV_VAR2="val2"' | sudo tee -a /etc/profile
        # Also set AWS_REGION for this session if not defined (and persist)
        if ! grep -q 'export AWS_REGION=' /etc/profile; then
          REGION_DETECTED=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $4}')
          echo "export AWS_REGION=\"$REGION_DETECTED\"" | sudo tee -a /etc/profile
        fi
        source /etc/profile

        sudo apt-get update -y
        sudo apt-get install -y ruby wget curl gnupg git nginx software-properties-common jq

        # CodeDeploy Agent (region-aware)
        cd /home/ubuntu
        REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
        wget "https://aws-codedeploy-${REGION}.s3.${REGION}.amazonaws.com/latest/install"
        chmod +x ./install
        ./install auto
        sudo systemctl enable codedeploy-agent
        sudo systemctl start codedeploy-agent

        # Node.js
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs

        # MongoDB 7.0
        curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
        echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update -y
        sudo apt-get install -y mongodb-org
        sudo systemctl enable mongod
        sudo systemctl start mongod
        sleep 10

        mongosh <<EOF2
        use admin
        db.createUser({user: "admin", pwd: "admin", roles: ["userAdminAnyDatabase", "dbAdminAnyDatabase", "readWriteAnyDatabase"]});
        use vrseBuilder
        db.createUser({user: "admin", pwd: "admin", roles: ["userAdmin", "dbAdmin", "readWrite"]});
        EOF2
        sudo sed -i '/#security:/a\security:\n  authorization: "enabled"' /etc/mongod.conf
        sudo systemctl restart mongod

        # Clone repo
        GH_USER="${GH_USERNAME}"
        GH_TOKEN="${GH_PAT}"
        REPO_NAME="your-repository"
        BRANCH="main"
        sudo git clone -b "$BRANCH" "https://${GH_USER}:${GH_TOKEN}@github.com/${GH_USER}/${REPO_NAME}.git"
        sudo chown -R ubuntu:ubuntu "$REPO_NAME"

        cd "/home/ubuntu/${REPO_NAME}"
        npm install

        # PM2
        sudo npm install -g pm2
        pm2 start server.js --name "my-app" --update-env
        pm2 startup systemd -u ubuntu --hp /home/ubuntu
        pm2 save

        # Nginx with HTTPS redirect
        sudo bash -c "cat > /etc/nginx/sites-available/default" <<NGINXCONF
        server {
            listen 80;
            server_name ${DOMAIN_NAME};
            return 301 https://\$host\$request_uri;
        }
        server {
            listen 443 ssl;
            server_name ${DOMAIN_NAME};
            client_max_body_size 30M;

            ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;

            location / {
                proxy_pass http://localhost:5000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
            }
        }
        NGINXCONF
        sudo nginx -t && sudo systemctl restart nginx

        # SSL Certbot
        sudo add-apt-repository -y ppa:certbot/certbot
        sudo apt-get update -y
        sudo apt-get install -y python3-certbot-nginx
        sudo certbot --nginx -d ${DOMAIN_NAME} --non-interactive --agree-tos -m ${EMAIL}
        sudo certbot renew --dry-run
        EOF

        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ steps.get-ami.outputs.AMI_ID }} \
          --count 1 \
          --instance-type ${{ github.event.inputs.instance_type }} \
          --key-name ${{ steps.create-key.outputs.KEY_NAME }} \
          --security-group-ids ${{ steps.create-sg.outputs.SECURITY_GROUP_ID }} \
          --iam-instance-profile Arn=${{ steps.ec2-role.outputs.PROFILE_ARN }} \
          --user-data file://user-data.sh \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ github.event.inputs.instance_name }}},{Key=Environment,Value=Development},{Key=Project,Value=CodeDeploy}]" \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT

        # Wait until running before associating EIP
        aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"

    # Allocate & associate Elastic IP
    - name: Allocate Elastic IP
      id: allocate-eip
      run: |
        ALLOC_JSON=$(aws ec2 allocate-address --domain vpc)
        ALLOC_ID=$(echo "$ALLOC_JSON" | jq -r .AllocationId)
        PUBLIC_IP=$(echo "$ALLOC_JSON" | jq -r .PublicIp)
        echo "ALLOCATION_ID=$ALLOC_ID" >> $GITHUB_OUTPUT
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_OUTPUT
        echo "Allocated Elastic IP: $PUBLIC_IP (AllocationId: $ALLOC_ID)"

    - name: Associate Elastic IP to Instance
      id: associate-eip
      run: |
        aws ec2 associate-address \
          --instance-id "${{ steps.launch-instance.outputs.INSTANCE_ID }}" \
          --allocation-id "${{ steps.allocate-eip.outputs.ALLOCATION_ID }}" \
          --query 'AssociationId' --output text

    - name: Summarize Outputs
      run: |
        echo "Instance ID: ${{ steps.launch-instance.outputs.INSTANCE_ID }}"
        echo "Elastic IP:  ${{ steps.allocate-eip.outputs.PUBLIC_IP }}"
        echo "::notice title=Next step::Create an A-record so '${{ github.event.inputs.domain_name }}' points to ${{ steps.allocate-eip.outputs.PUBLIC_IP }}."
