name: Backend EKS Deployment

on:
  workflow_dispatch:
    inputs:
      eks_cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string

env:
  IMAGE_NAME: tarkeshhd/backend
  DOCKERFILE_PATH: ./vrse-builder-backend-main/Dockerfile
  CONTEXT_PATH: ./vrse-builder-backend-main

jobs:
  setup-iam-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # âœ… Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # âœ… Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # âœ… Attach IAM Policies (Automated)
      - name: Attach Required IAM Policies
        run: |
          USER_NAME="github-actions-user-backend"

          for POLICY in AmazonEKSFullAccess AmazonEC2FullAccess IAMFullAccess CloudFormationFullAccess; do
            if ! aws iam list-attached-user-policies --user-name "$USER_NAME" | grep -q "$POLICY"; then
              aws iam attach-user-policy \
                --user-name "$USER_NAME" \
                --policy-arn arn:aws:iam::aws:policy/$POLICY
              echo "âœ… Attached $POLICY to $USER_NAME"
            else
              echo "ðŸ”¹ $POLICY already attached."
            fi
          done

      # âœ… Install eksctl and kubectl
      - name: Install eksctl and kubectl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      # âœ… Check or Create EKS Cluster
      - name: Check or Create EKS Cluster
        run: |
          CLUSTER_NAME="${{ github.event.inputs.eks_cluster_name }}"
          REGION="${{ secrets.AWS_REGION }}"

          echo "Checking if cluster $CLUSTER_NAME exists..."
          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "âœ… Cluster $CLUSTER_NAME already exists."
          else
            echo "ðŸš€ Creating EKS cluster $CLUSTER_NAME..."
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed
          fi

      # âœ… Generate kubeconfig
      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ github.event.inputs.eks_cluster_name }} \
            --region ${{ secrets.AWS_REGION }}

      # âœ… Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          echo "Using Dockerfile: $DOCKERFILE_PATH"
          echo "Using Build Context: $CONTEXT_PATH"
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f $DOCKERFILE_PATH -t $IMAGE_NAME:${GITHUB_SHA} $CONTEXT_PATH
          docker push $IMAGE_NAME:${GITHUB_SHA}

      # âœ… Deploy Backend to EKS
      - name: Deploy Backend
        run: |
          sed -i "s|image: .*|image: $IMAGE_NAME:${GITHUB_SHA}|" backend-deployment.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml

      # âœ… Verify Deployment
      - name: Verify Rollout
        run: |
          kubectl rollout status deployment/backend-deployment
