name: Backend CI/CD to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: Backend-deploy-1234
      IMAGE_NAME: backend
      DEPLOYMENT_FILE: backend-deployment.yaml
      SERVICE_FILE: backend-service.yaml

    steps:
      # âœ… Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # âœ… Install AWS CLI
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      # âœ… Configure AWS credentials (amplify-dev user)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # âœ… Attach required IAM policies to amplify-dev
      - name: Attach IAM Policies to amplify-dev
        run: |
          USER_NAME="amplify-dev"
          POLICIES=(
            "AmazonEKSClusterPolicy"
            "AmazonEKSServicePolicy"
            "AmazonEC2FullAccess"
            "AmazonVPCFullAccess"
            "IAMFullAccess"
            "AmazonEKSWorkerNodePolicy"
            "AmazonEKS_CNI_Policy"
            "AmazonEC2ContainerRegistryFullAccess"
          )

          for POLICY in "${POLICIES[@]}"; do
            if ! aws iam list-attached-user-policies --user-name "$USER_NAME" | grep -q "$POLICY"; then
              aws iam attach-user-policy \
                --user-name "$USER_NAME" \
                --policy-arn arn:aws:iam::aws:policy/$POLICY
              echo "âœ… Attached $POLICY"
            else
              echo "ðŸ”¹ $POLICY already attached."
            fi
          done

      # âœ… Check or create EKS cluster
      - name: Ensure EKS Cluster Exists
        run: |
          echo "Checking if cluster $CLUSTER_NAME exists..."
          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "âœ… Cluster $CLUSTER_NAME already exists."
          else
            echo "ðŸš€ Creating EKS cluster $CLUSTER_NAME..."
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$AWS_REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed
          fi

      # âœ… Create ECR Repository if not exists
      - name: Ensure ECR Repository Exists
        run: |
          if ! aws ecr describe-repositories --repository-names $IMAGE_NAME >/dev/null 2>&1; then
            aws ecr create-repository --repository-name $IMAGE_NAME
            echo "âœ… Created ECR repository $IMAGE_NAME"
          else
            echo "âœ… ECR repository $IMAGE_NAME already exists."
          fi

      # âœ… Login to ECR
      - name: Login to Amazon ECR
        id: ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com
          echo "ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com" >> $GITHUB_ENV

      # âœ… Build & Push Docker Image
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t $IMAGE_NAME:$IMAGE_TAG -f ./vrse-builder-backend-main/Dockerfile ./vrse-builder-backend-main
          docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          echo "ECR_IMAGE=$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      # âœ… Update kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      # âœ… Deploy to EKS
      - name: Deploy Backend
        run: |
          sed -i "s|image: .*|image: $ECR_IMAGE|" $DEPLOYMENT_FILE
          kubectl apply -f $DEPLOYMENT_FILE
          kubectl apply -f $SERVICE_FILE
          kubectl rollout status deployment/backend-deployment
