name: Deploy Backend and MongoDB to EKS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout Code
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      # ✅ Configure AWS Credentials
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🧰 Install eksctl and kubectl
        run: |
         # ✅ Corrected eksctl download URL
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_linux_amd64.tar.gz" --output eksctl.tar.gz
          tar -xzf eksctl.tar.gz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

         # ✅ Install kubectl
         curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
         chmod +x kubectl
         sudo mv kubectl /usr/local/bin/


      # ✅ Update kubeconfig for EKS
      - name: 📡 Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.EKS_CLUSTER_NAME }}

      # ✅ Login to ECR & Build/Push Image
      - name: 🐳 Login to ECR and Build Image
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 133354030153.dkr.ecr.us-east-1.amazonaws.com
          
          docker build -f vrse-builder-backend-main/Dockerfile -t backend .
          docker tag backend:latest 133354030153.dkr.ecr.us-east-1.amazonaws.com/backend:latest
          docker push 133354030153.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      # ✅ Deploy Backend and MongoDB
      - name: ⚙️ Apply Backend + MongoDB YAMLs
        working-directory: vrse-builder-backend-main
        run: |
          kubectl apply -f mongodb-pvc.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml

      # ✅ Install NGINX Ingress
      - name: 🌐 Install NGINX Ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=180s

      # ✅ Install cert-manager
      - name: 🔐 Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl rollout status deployment cert-manager -n cert-manager --timeout=180s
          kubectl rollout status deployment cert-manager-webhook -n cert-manager --timeout=180s
          kubectl rollout status deployment cert-manager-cainjector -n cert-manager --timeout=180s

      # ✅ Apply ClusterIssuer for Let's Encrypt
      - name: 📜 Apply ClusterIssuer
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f cluster-issuer.yaml

      # ✅ Apply Ingress for HTTPS
      - name: 🔁 Apply Backend Ingress
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f backend-ingress.yaml

      # ✅ Deploy Kubernetes Dashboard
      - name: 📊 Deploy Kubernetes Dashboard
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

      # ✅ Apply dashboard-admin.yaml
      - name: 🛡️ Apply Dashboard Admin Access
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f dashboard-admin.yaml

      # ✅ Apply aws-auth.yaml (IAM to RBAC mapping)
      - name: 🔧 Apply AWS Auth ConfigMap
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f aws-auth.yaml

      # ✅ Show Dashboard Token
      - name: 🔑 Print Dashboard Login Token
        run: |
          echo "🔐 Dashboard Login Token:"
          kubectl -n kubernetes-dashboard create token admin-user

      # ✅ Show Dashboard Access Info
      - name: 🌐 Dashboard Access Instructions
        run: |
          echo "✅ Kubernetes Dashboard is deployed."
          echo "To access:"
          echo "Run 'kubectl proxy' on your machine"
          echo "Then open:"
          echo "http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"
