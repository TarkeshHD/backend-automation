name: AWS Infrastructure Setup

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client Name (used for key pair)'
        required: true
        type: string
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - t3.micro
          - t3.small
          - t3.medium
          - t3.large
      instance_name:
        description: 'EC2 Instance Name Tag'
        required: true
        default: 'CodeDeploy-Instance'
        type: string

env:
  AWS_REGION: us-east-1
  EC2_ROLE_NAME: EC2-CodeDeploy-Role
  CODEDEPLOY_ROLE_NAME: CodeDeploy-Service-Role
  SECURITY_GROUP_NAME: CodeDeploy-Security-Group

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      INSTANCE_ID: ${{ steps.launch-instance.outputs.INSTANCE_ID }}
      KEY_NAME: ${{ steps.create-key.outputs.KEY_NAME }}
      SECURITY_GROUP_ID: ${{ steps.create-sg.outputs.SECURITY_GROUP_ID }}
      ELASTIC_IP: ${{ steps.elastic-ip.outputs.ELASTIC_IP }}
      ALLOCATION_ID: ${{ steps.elastic-ip.outputs.ALLOCATION_ID }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ------------------ EC2 IAM Role + Instance Profile ------------------
    - name: Create EC2 IAM Role and Instance Profile
      id: ec2-role
      run: |
        cat > ec2-trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ec2.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF

        if ! aws iam get-role --role-name ${{ env.EC2_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-role \
            --role-name ${{ env.EC2_ROLE_NAME }} \
            --assume-role-policy-document file://ec2-trust-policy.json \
            --description "IAM role for EC2 instances to work with CodeDeploy"

          aws iam attach-role-policy \
            --role-name ${{ env.EC2_ROLE_NAME }} \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

          aws iam attach-role-policy \
            --role-name ${{ env.EC2_ROLE_NAME }} \
            --policy-arn arn:aws:iam::aws:policy/AmazonEC2RoleforAWSCodeDeploy
        fi

        if ! aws iam get-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }}
        fi

        ATTACHED_ROLE=$(aws iam get-instance-profile \
          --instance-profile-name ${{ env.EC2_ROLE_NAME }} \
          --query 'InstanceProfile.Roles[0].RoleName' \
          --output text 2>/dev/null || echo "None")

        if [ "$ATTACHED_ROLE" != "${{ env.EC2_ROLE_NAME }}" ]; then
          aws iam add-role-to-instance-profile \
            --instance-profile-name ${{ env.EC2_ROLE_NAME }} \
            --role-name ${{ env.EC2_ROLE_NAME }}
        fi

        echo "Waiting for instance profile propagation..."
        for i in {1..12}; do
          PROFILE_ARN=$(aws iam get-instance-profile \
            --instance-profile-name ${{ env.EC2_ROLE_NAME }} \
            --query 'InstanceProfile.Arn' \
            --output text 2>/dev/null)
          if [ -n "$PROFILE_ARN" ] && [ "$PROFILE_ARN" != "None" ]; then
            echo "PROFILE_ARN=$PROFILE_ARN" >> $GITHUB_OUTPUT
            break
          fi
          echo "Retrying in 5s..."
          sleep 5
        done

    # ------------------ CodeDeploy IAM Role ------------------
    - name: Create CodeDeploy IAM Role
      run: |
        cat > codedeploy-trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "codedeploy.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF

        if ! aws iam get-role --role-name ${{ env.CODEDEPLOY_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-role \
            --role-name ${{ env.CODEDEPLOY_ROLE_NAME }} \
            --assume-role-policy-document file://codedeploy-trust-policy.json \
            --description "IAM role for CodeDeploy"

          aws iam attach-role-policy \
            --role-name ${{ env.CODEDEPLOY_ROLE_NAME }} \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
        fi

    # ------------------ Security Group ------------------
    - name: Create Security Group
      id: create-sg
      run: |
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query 'Vpcs[0].VpcId' --output text)
        EXISTING_SG=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=${{ env.SECURITY_GROUP_NAME }}" \
          --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")

        if [ "$EXISTING_SG" != "None" ] && [ "$EXISTING_SG" != "" ]; then
          echo "SECURITY_GROUP_ID=$EXISTING_SG" >> $GITHUB_OUTPUT
        else
          SG_ID=$(aws ec2 create-security-group \
            --group-name ${{ env.SECURITY_GROUP_NAME }} \
            --description "SG for CodeDeploy" \
            --vpc-id $VPC_ID \
            --query 'GroupId' --output text)

          for PORT in 22 80 443 27017; do
            aws ec2 authorize-security-group-ingress \
              --group-id $SG_ID \
              --protocol tcp \
              --port $PORT \
              --cidr 0.0.0.0/0
          done

          echo "SECURITY_GROUP_ID=$SG_ID" >> $GITHUB_OUTPUT
        fi

    # ------------------ Create Key Pair ------------------
    - name: Create EC2 Key Pair
      id: create-key
      run: |
        KEY_NAME="${{ github.event.inputs.client_name }}-key-$(date +%s)"
        aws ec2 create-key-pair \
          --key-name "$KEY_NAME" \
          --query 'KeyMaterial' \
          --output text > "${KEY_NAME}.pem"

        chmod 400 "${KEY_NAME}.pem"
        echo "KEY_NAME=$KEY_NAME" >> $GITHUB_OUTPUT

    - name: Upload Private Key Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ec2-private-key
        path: ${{ steps.create-key.outputs.KEY_NAME }}.pem

    # ------------------ Get AMI ------------------
    - name: Get Latest Ubuntu AMI
      id: get-ami
      run: |
        AMI_ID=$(aws ec2 describe-images \
          --owners 099720109477 \
          --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
          --query 'Images|sort_by(@, &CreationDate)[-1].ImageId' \
          --output text)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT

    # ------------------ Launch EC2 with Node.js ------------------
    - name: Launch EC2 Instance
      id: launch-instance
      run: |
        cat > user-data.sh << 'EOF'
        #!/bin/bash
        sudo apt-get update -y
        sudo apt-get install -y ruby wget curl

        # Install CodeDeploy Agent
        cd /home/ubuntu
        wget https://aws-codedeploy-${AWS_REGION}.s3.${AWS_REGION}.amazonaws.com/latest/install
        chmod +x ./install
        ./install auto
        sudo service codedeploy-agent start

        # Install Node.js and npm (Option 3)
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs

        # Verify Node.js and npm
        node -v
        npm -v
        EOF

        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ steps.get-ami.outputs.AMI_ID }} \
          --count 1 \
          --instance-type ${{ github.event.inputs.instance_type }} \
          --key-name ${{ steps.create-key.outputs.KEY_NAME }} \
          --security-group-ids ${{ steps.create-sg.outputs.SECURITY_GROUP_ID }} \
          --iam-instance-profile Arn=${{ steps.ec2-role.outputs.PROFILE_ARN }} \
          --user-data file://user-data.sh \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ github.event.inputs.instance_name }}},{Key=Environment,Value=Development},{Key=Project,Value=CodeDeploy}]" \
          --query 'Instances[0].InstanceId' \
          --output text)

        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID

    # ------------------ Allocate and Associate Elastic IP ------------------
    - name: Allocate and Associate Elastic IP
      id: elastic-ip
      run: |
        ALLOCATION_ID=$(aws ec2 allocate-address \
          --domain vpc \
          --query 'AllocationId' \
          --output text)
        echo "ALLOCATION_ID=$ALLOCATION_ID" >> $GITHUB_OUTPUT

        aws ec2 associate-address \
          --instance-id ${{ steps.launch-instance.outputs.INSTANCE_ID }} \
          --allocation-id $ALLOCATION_ID

        ELASTIC_IP=$(aws ec2 describe-addresses \
          --allocation-ids $ALLOCATION_ID \
          --query 'Addresses[0].PublicIp' \
          --output text)
        echo "ELASTIC_IP=$ELASTIC_IP" >> $GITHUB_OUTPUT

    # ------------------ Summary ------------------
    - name: Summary
      run: |
        echo "## ðŸš€ Infrastructure Setup Complete!" >> $GITHUB_STEP_SUMMARY
        echo "- **EC2 Instance ID**: ${{ steps.launch-instance.outputs.INSTANCE_ID }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Elastic IP**: ${{ steps.elastic-ip.outputs.ELASTIC_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Key Pair**: ${{ steps.create-key.outputs.KEY_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”‘ SSH Command:" >> $GITHUB_STEP_SUMMARY
        echo "\`ssh -i ec2-private-key/${{ steps.create-key.outputs.KEY_NAME }}.pem ubuntu@${{ steps.elastic-ip.outputs.ELASTIC_IP }}\`" >> $GITHUB_STEP_SUMMARY

  # ------------------ Cleanup on Failure ------------------
  cleanup-on-failure:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    if: failure()
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cleanup AWS resources
      run: |
        echo "Cleaning up resources due to failure..."
        INSTANCE_ID="${{ needs.setup-infrastructure.outputs.INSTANCE_ID }}"
        KEY_NAME="${{ needs.setup-infrastructure.outputs.KEY_NAME }}"
        SG_ID="${{ needs.setup-infrastructure.outputs.SECURITY_GROUP_ID }}"
        ALLOCATION_ID="${{ needs.setup-infrastructure.outputs.ALLOCATION_ID }}"

        if [ -n "$INSTANCE_ID" ] && [ "$INSTANCE_ID" != "None" ]; then
          aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
        fi

        if [ -n "$KEY_NAME" ] && [ "$KEY_NAME" != "None" ]; then
          aws ec2 delete-key-pair --key-name "$KEY_NAME"
        fi

        if [ -n "$ALLOCATION_ID" ] && [ "$ALLOCATION_ID" != "None" ]; then
          aws ec2 release-address --allocation-id "$ALLOCATION_ID"
        fi

        if [ -n "$SG_ID" ] && [ "$SG_ID" != "None" ]; then
          aws ec2 delete-security-group --group-id "$SG_ID"
        fi

        echo "Cleanup completed."
