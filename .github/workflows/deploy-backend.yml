name: Deploy Backend and MongoDB to EKS

on:
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      # ‚úÖ Checkout the code
      - uses: actions/checkout@v3

      # ‚úÖ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install eksctl and kubectl
        run: |
          echo "üì¶ Installing eksctl..."
          curl -L "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" -o eksctl.tar.gz
          tar -xzf eksctl.tar.gz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

          echo "üì¶ Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
           kubectl version --client


      # ‚úÖ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ‚úÖ Create ECR repo if not exists
      - name: Create ECR Repository if not exists
        run: |
          REPO_NAME="backend"
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$REPO_NAME"
          fi

      # ‚úÖ Build and Push Docker image
      - name: Build and Push Backend Docker image
        run: |
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"
          docker build -f vrse-builder-backend-main/Dockerfile -t "$BACKEND_IMAGE:$TAG" -t "$BACKEND_IMAGE:latest" ./vrse-builder-backend-main
          docker push "$BACKEND_IMAGE:$TAG"
          docker push "$BACKEND_IMAGE:latest"

      # ‚úÖ Ensure EKS Cluster exists
      - name: Ensure EKS Cluster
        run: |
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"
          if ! aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed
          fi

      # ‚úÖ Generate kubeconfig
      - name: Generate kubeconfig
        run: |
          aws eks wait cluster-active --name "${{ secrets.EKS_CLUSTER_NAME }}" --region "${{ secrets.AWS_REGION }}"
          aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER_NAME }}" --region "${{ secrets.AWS_REGION }}"

      # ‚úÖ Apply MongoDB PVC
      - name: Deploy MongoDB Persistent Volume Claim
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f mongodb-pvc.yaml

      # ‚úÖ Deploy Backend and MongoDB
      - name: Deploy Backend and MongoDB
        working-directory: vrse-builder-backend-main
        run: |
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"
          sed -i "s|image: .*|image: $BACKEND_IMAGE:$TAG|" backend-deployment.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml

      # ‚úÖ Install NGINX Ingress Controller
      - name: Install NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=180s

      # ‚úÖ Install cert-manager
      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl rollout status deployment cert-manager -n cert-manager --timeout=180s
          kubectl rollout status deployment cert-manager-webhook -n cert-manager --timeout=180s
          kubectl rollout status deployment cert-manager-cainjector -n cert-manager --timeout=180s

      # ‚úÖ Apply ClusterIssuer
      - name: Apply ClusterIssuer
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f cluster-issuer.yaml

      # ‚úÖ Apply Ingress
      - name: Apply Backend Ingress
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f backend-ingress.yaml

      # ‚úÖ Apply aws-auth.yaml (IAM to RBAC mapping)
      - name: Apply aws-auth ConfigMap
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f aws-auth.yaml

      # ‚úÖ Deploy Kubernetes Dashboard
      - name: Deploy Kubernetes Dashboard
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

      # ‚úÖ Apply dashboard-admin.yaml
      - name: Apply Kubernetes Dashboard Admin User
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f dashboard-admin.yaml

      # ‚úÖ Show Dashboard Access Info
      - name: Show Dashboard Access Token
        run: |
          echo "üîë Copy this token and use it in the Kubernetes Dashboard login:"
          kubectl -n kubernetes-dashboard create token admin-user
          echo ""
          echo "üåê Open Kubernetes Dashboard:"
          echo "http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"
          echo "Run: kubectl proxy on your local machine to access the dashboard."
