name: Deploy Backend to EKS with HTTPS (Let's Encrypt)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REPO_NAME: backend
      BACKEND_CONTEXT_DIR: vrse-builder-backend-main
      BACKEND_DOCKERFILE: vrse-builder-backend-main/Dockerfile
      BACKEND_TARGET_PORT: "3000"
      APP_HOST: poc-api.autovrse.app

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install CLIs (kubectl, eksctl, helm)
        run: |
          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C /tmp && sudo mv /tmp/eksctl /usr/local/bin
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"
          docker build -f "$BACKEND_DOCKERFILE" -t "$IMAGE:$TAG" -t "$IMAGE:latest" "$BACKEND_CONTEXT_DIR"
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER_NAME }}" --region "${{ secrets.AWS_REGION }}"

      # ✅ Install NGINX Ingress Controller
      - name: Install NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/aws/deploy.yaml
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=180s

      # ✅ Install cert-manager
      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.2/cert-manager.yaml
          kubectl rollout status deployment cert-manager -n cert-manager --timeout=180s

      # ✅ Create Let's Encrypt ClusterIssuer
      - name: Apply ClusterIssuer
        working-directory: ${{ env.BACKEND_CONTEXT_DIR }}
        run: kubectl apply -f cluster-issuer.yaml

      # ✅ Deploy MongoDB
      - name: Deploy MongoDB
        working-directory: ${{ env.BACKEND_CONTEXT_DIR }}
        run: |
          kubectl apply -f mongodb-pvc.yaml
          kubectl apply -f mongodb-deployment.yaml
          kubectl apply -f mongodb-service.yaml
          kubectl apply -f mongodb-poddisruptionbudget.yaml
          kubectl apply -f rbac-restrict-delete.yaml

      # ✅ Deploy Backend (replace image)
      - name: Deploy Backend
        working-directory: ${{ env.BACKEND_CONTEXT_DIR }}
        run: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"
          sed -i "s|image: .*|image: $IMAGE:$TAG|" backend-deployment.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml

      # ✅ Apply Ingress with cert-manager annotations
      - name: Deploy Ingress
        working-directory: ${{ env.BACKEND_CONTEXT_DIR }}
        run: kubectl apply -f backend-ingress.yaml

      # ✅ Wait for Deployment
      - name: Wait for Rollout
        run: |
          kubectl rollout status deployment/backend-deployment --timeout=180s

      # ✅ HTTPS Smoke Test
      - name: HTTPS Test
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" https://poc-api.autovrse.app/health || true)
            echo "Attempt $i → HTTP $code"
            if [ "$code" = "200" ]; then
              echo "✅ Healthy"
              exit 0
            fi
            sleep 5
          done
          echo "❌ HTTPS check failed"
          exit 1
