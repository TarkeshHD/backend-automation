name: Deploy Backend and MongoDB to EKS

on:
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      # ‚úÖ Checkout the code
      - uses: actions/checkout@v3

      # ‚úÖ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install eksctl and kubectl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin

      # ‚úÖ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ‚úÖ Create ECR repo if not exists
      - name: Create ECR Repository if not exists
        run: |
          REPO_NAME="backend"
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$REPO_NAME"
          fi


      - name: Check Node and NPM Version
        run: |
          node -v
          npm -v


      # ‚úÖ Build and Push Docker image
      - name: Build and Push Backend Docker image
        run: |
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"

          docker build -f vrse-builder-backend-main/Dockerfile \
            -t "$BACKEND_IMAGE:$TAG" \
            -t "$BACKEND_IMAGE:latest" \
            ./vrse-builder-backend-main

          docker push "$BACKEND_IMAGE:$TAG"
          docker push "$BACKEND_IMAGE:latest"

      # ‚úÖ Ensure EKS Cluster exists
      - name: Ensure EKS Cluster
        run: |
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"
          STACK_NAME="eksctl-${CLUSTER_NAME}-cluster"

          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "‚úÖ Cluster $CLUSTER_NAME exists."
          elif aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Stack $STACK_NAME exists. Skipping creation."
          else
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed
          fi

      # ‚úÖ Generate kubeconfig
      - name: Generate kubeconfig
        run: |
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"
          aws eks wait cluster-active --name "$CLUSTER_NAME" --region "$REGION"
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$REGION"

      # ‚úÖ Apply MongoDB PVC
      - name: Deploy MongoDB PVC
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f mongodb-pvc.yaml

      # ‚úÖ Apply backend-secret.yaml (your user-data.sh env vars)
      - name: Apply Backend Environment Secrets
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f backend-secret.yaml

      # ‚úÖ Deploy Backend and MongoDB
      - name: Deploy Backend and MongoDB
        working-directory: vrse-builder-backend-main
        run: |
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"
          sed -i "s|image: .*|image: $BACKEND_IMAGE:$TAG|" backend-deployment.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml

      # ‚úÖ Install NGINX Ingress Controller
      - name: Install NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=180s

      # ‚úÖ Install cert-manager
      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl rollout status deployment cert-manager -n cert-manager --timeout=180s
          kubectl rollout status deployment cert-manager-webhook -n cert-manager --timeout=180s
          kubectl rollout status deployment cert-manager-cainjector -n cert-manager --timeout=180s

      # ‚úÖ Apply ClusterIssuer for HTTPS
      - name: Apply ClusterIssuer
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f cluster-issuer.yaml

      # ‚úÖ Apply Ingress for backend
      - name: Apply Backend Ingress
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f backend-ingress.yaml

      # ‚úÖ Show pod status
      - name: Show Pod Status
        run: kubectl get pods -o wide

      # ‚úÖ Show container logs
      - name: Backend Logs
        run: |
          POD=$(kubectl get pods -l app=backend -o jsonpath='{.items[0].metadata.name}')
          echo "Logs from pod $POD:"
          kubectl logs "$POD" -c backend --tail=50

      # ‚úÖ Print Success Message
      - name: üéâ Print Backend URL
        run: |
          echo "‚úÖ Backend Deployed Successfully!"
          echo "üîó Access it at: https://poc-api.autovrse.app"
