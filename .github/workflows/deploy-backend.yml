name: Backend Deployment to AWS EKS

on:
  workflow_dispatch:
    inputs:
      eks_cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: tarkeshhd/backend
  DOCKERFILE_PATH: ./vrse-builder-backend-main/Dockerfile
  CONTEXT_PATH: ./vrse-builder-backend-main
  DEPLOYMENT_FILE: backend-deployment.yaml
  SERVICE_FILE: backend-service.yaml

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    # âœ… Checkout repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # âœ… Install kubectl and eksctl
    - name: Install tools
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    # âœ… Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # âœ… Attach required IAM policies
    - name: Attach Required IAM Policies
      run: |
        USER_NAME="github-actions-user-backend"

        POLICIES=(
          "AmazonEKSClusterPolicy"
          "AmazonEKSServicePolicy"
          "AmazonEC2FullAccess"
          "IAMFullAccess"
          "CloudFormationFullAccess"
        )

        for POLICY in "${POLICIES[@]}"; do
          POLICY_ARN="arn:aws:iam::aws:policy/$POLICY"
          if ! aws iam list-attached-user-policies --user-name "$USER_NAME" | grep -q "$POLICY"; then
            aws iam attach-user-policy \
              --user-name "$USER_NAME" \
              --policy-arn "$POLICY_ARN"
            echo "âœ… Attached $POLICY to $USER_NAME"
          else
            echo "ðŸ”¹ $POLICY already attached."
          fi
        done

    # âœ… Login to DockerHub
    - name: Docker Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # âœ… Build and Push Docker image
    - name: Build and Push Docker Image
      run: |
        echo "Using Dockerfile: $DOCKERFILE_PATH"
        echo "Using Build Context: $CONTEXT_PATH"
        docker build -f $DOCKERFILE_PATH -t $IMAGE_NAME:${GITHUB_SHA} $CONTEXT_PATH
        docker push $IMAGE_NAME:${GITHUB_SHA}

    # âœ… Check or create EKS cluster
    - name: Check or create EKS cluster
      run: |
        CLUSTER_NAME="${{ github.event.inputs.eks_cluster_name }}"
        REGION="${{ env.AWS_REGION }}"

        echo "Checking if cluster $CLUSTER_NAME exists..."
        if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
          echo "âœ… Cluster $CLUSTER_NAME already exists."
        else
          echo "ðŸš€ Creating EKS cluster $CLUSTER_NAME..."
          eksctl create cluster \
            --name "$CLUSTER_NAME" \
            --region "$REGION" \
            --nodegroup-name standard-workers \
            --node-type t3.medium \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 3 \
            --managed
        fi

    # âœ… Generate kubeconfig
    - name: Generate kubeconfig
      run: |
        aws eks update-kubeconfig \
          --name ${{ github.event.inputs.eks_cluster_name }} \
          --region ${{ env.AWS_REGION }}

    # âœ… Deploy backend to EKS
    - name: Deploy Backend
      run: |
        sed -i "s|image: .*|image: $IMAGE_NAME:${GITHUB_SHA}|" $DEPLOYMENT_FILE
        kubectl apply -f $DEPLOYMENT_FILE
        kubectl apply -f $SERVICE_FILE

    # âœ… Verify rollout
    - name: Verify Deployment
      run: |
        kubectl rollout status deployment/backend-deployment
