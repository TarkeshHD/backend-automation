name: AWS Infrastructure Setup

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client Name (used for key pair)'
        required: true
        type: string
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - t3.micro
          - t3.small
          - t3.medium
          - t3.large
      instance_name:
        description: 'EC2 Instance Name Tag'
        required: true
        default: 'CodeDeploy-Instance'
        type: string
      domain_name:
        description: 'Domain name pointing to Elastic IP'
        required: true
        type: string
      email:
        description: 'Email for SSL certificate registration'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  EC2_ROLE_NAME: EC2-CodeDeploy-Role
  SECURITY_GROUP_NAME: CodeDeploy-Security-Group

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Default VPC and Subnet
      id: get-network
      run: |
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query 'Vpcs[0].VpcId' --output text)
        SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0].SubnetId' --output text)
        echo "VPC_ID=$VPC_ID" >> $GITHUB_OUTPUT
        echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_OUTPUT

    - name: Create Security Group
      id: create-sg
      run: |
        SG_ID=$(aws ec2 create-security-group --group-name ${{ env.SECURITY_GROUP_NAME }} --description "Allow web traffic" --vpc-id ${{ steps.get-network.outputs.VPC_ID }} --output text)
        for PORT in 22 80 443 27017; do
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port $PORT --cidr 0.0.0.0/0
        done
        echo "SECURITY_GROUP_ID=$SG_ID" >> $GITHUB_OUTPUT

    - name: Create EC2 Key Pair
      id: create-key
      run: |
        KEY_NAME="${{ github.event.inputs.client_name }}-key"
        aws ec2 create-key-pair --key-name "$KEY_NAME" --query 'KeyMaterial' --output text > "$KEY_NAME.pem"
        chmod 400 "$KEY_NAME.pem"
        echo "KEY_NAME=$KEY_NAME" >> $GITHUB_OUTPUT

    - name: Upload Private Key
      uses: actions/upload-artifact@v4
      with:
        name: ec2-private-key
        path: ${{ steps.create-key.outputs.KEY_NAME }}.pem

    - name: Get Latest Ubuntu AMI
      id: get-ami
      run: |
        AMI_ID=$(aws ec2 describe-images \
          --owners 099720109477 \
          --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
          --query 'Images|sort_by(@, &CreationDate)[-1].ImageId' \
          --output text)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT

    - name: Launch EC2 Instance
      env:
        DOMAIN_NAME: ${{ github.event.inputs.domain_name }}
        EMAIL: ${{ github.event.inputs.email }}
      run: |
        cat > user-data.sh <<EOF
        #!/bin/bash
        sudo apt update -y
        sudo apt install -y nginx nodejs npm mongodb
        sudo systemctl start nginx
        sudo systemctl enable nginx
        sudo systemctl start mongod
        sudo systemctl enable mongod
        # App setup placeholder
        EOF

        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ steps.get-ami.outputs.AMI_ID }} \
          --count 1 \
          --instance-type ${{ github.event.inputs.instance_type }} \
          --key-name ${{ steps.create-key.outputs.KEY_NAME }} \
          --security-group-ids ${{ steps.create-sg.outputs.SECURITY_GROUP_ID }} \
          --subnet-id ${{ steps.get-network.outputs.SUBNET_ID }} \
          --user-data file://user-data.sh \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ github.event.inputs.instance_name }}}]" \
          --query 'Instances[0].InstanceId' --output text)

        echo "EC2 instance launched with ID: $INSTANCE_ID"
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID

        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "Public IP: $PUBLIC_IP"
