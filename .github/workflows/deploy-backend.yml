name: Deploy Backend and MongoDB to EKS

on:
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      # âœ… Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # âœ… Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # âœ… Install eksctl and kubectl
      - name: Install eksctl and kubectl
        run: |
          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz"
          tar -xzf eksctl_$(uname -s)_amd64.tar.gz -C /tmp && sudo mv /tmp/eksctl /usr/local/bin/
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      # âœ… Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # âœ… Create ECR repo if missing
      - name: Create ECR Repository if not exists
        run: |
          REPO_NAME="backend"
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$REPO_NAME"
          fi

      # âœ… Build & Push Docker image
      - name: Build and Push Docker Image
        run: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"

          docker build -t "$IMAGE:$TAG" -t "$IMAGE:latest" ./vrse-builder-backend-main
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"

      # âœ… Update kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # âœ… Apply MongoDB PVC
      - name: Deploy MongoDB Persistent Volume Claim
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f mongodb-pvc.yaml

      # âœ… Deploy Backend + MongoDB
      - name: Deploy Backend and MongoDB
        working-directory: vrse-builder-backend-main
        run: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"
          sed -i "s|image: .*|image: $IMAGE:$TAG|" backend-deployment.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml

      # âœ… Install NGINX Ingress Controller
      - name: Install NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=180s

      # âœ… Install Cert-Manager
      - name: Install Cert-Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl rollout status deployment cert-manager -n cert-manager --timeout=180s
          kubectl rollout status deployment cert-manager-webhook -n cert-manager --timeout=180s
          kubectl rollout status deployment cert-manager-cainjector -n cert-manager --timeout=180s

      # âœ… Apply ClusterIssuer
      - name: Apply ClusterIssuer for Let's Encrypt
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f cluster-issuer.yaml

      # âœ… Apply Ingress for Backend HTTPS
      - name: Apply Ingress Resource
        working-directory: vrse-builder-backend-main
        run: kubectl apply -f backend-ingress.yaml

      # âœ… (Optional) Deploy Kubernetes Dashboard
      - name: Deploy Kubernetes Dashboard
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: admin-user
            namespace: kubernetes-dashboard
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: admin-user
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: admin-user
            namespace: kubernetes-dashboard
          EOF

      # âœ… Show backend logs (useful for debugging)
      - name: Show Backend Container Logs
        run: |
          POD=$(kubectl get pods -l app=backend -o jsonpath='{.items[0].metadata.name}')
          kubectl logs "$POD" -c backend --tail=100

      # âœ… Print deployment success
      - name: ðŸŽ‰ Deployment Complete
        run: echo "âœ… Backend deployed at: https://poc-api.autovrse.app"
