name: AWS Infrastructure Setup with Custom VPC

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client Name (for key pair)'
        required: true
        type: string
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - t3.micro
          - t3.small
          - t3.medium
      instance_name:
        description: 'EC2 Instance Name'
        required: true
        default: 'CodeDeploy-Instance'
        type: string
      domain_name:
        description: 'Domain name pointing to EC2'
        required: true
        type: string
      email:
        description: 'Email for SSL Certbot'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  EC2_ROLE_NAME: EC2-CodeDeploy-Role
  SECURITY_GROUP_NAME: CustomSecurityGroup

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create IAM Role and Instance Profile
        run: |
          echo '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ec2.amazonaws.com"},"Action":"sts:AssumeRole"}]}' > ec2-trust.json
          aws iam create-role --role-name $EC2_ROLE_NAME --assume-role-policy-document file://ec2-trust.json || true
          aws iam attach-role-policy --role-name $EC2_ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess || true
          aws iam attach-role-policy --role-name $EC2_ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole || true
          aws iam create-instance-profile --instance-profile-name $EC2_ROLE_NAME || true
          aws iam add-role-to-instance-profile --instance-profile-name $EC2_ROLE_NAME --role-name $EC2_ROLE_NAME || true

      - name: Create VPC, Subnet, IGW, Route Table
        id: network
        run: |
          VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text)
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support "{"Value":true}"
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames "{"Value":true}"

          IGW_ID=$(aws ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text)
          aws ec2 attach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID

          SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --availability-zone ${{ env.AWS_REGION }}a --query 'Subnet.SubnetId' --output text)

          RT_ID=$(aws ec2 create-route-table --vpc-id $VPC_ID --query 'RouteTable.RouteTableId' --output text)
          aws ec2 create-route --route-table-id $RT_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID
          aws ec2 associate-route-table --subnet-id $SUBNET_ID --route-table-id $RT_ID

          SG_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Allow web" --vpc-id $VPC_ID --query 'GroupId' --output text)
          for PORT in 22 80 443; do
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port $PORT --cidr 0.0.0.0/0
          done

          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_ENV
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV

      - name: Create EC2 Key Pair
        id: key
        run: |
          KEY_NAME=${{ github.event.inputs.client_name }}-key-${{ github.run_id }}
          aws ec2 create-key-pair --key-name $KEY_NAME --query 'KeyMaterial' --output text > $KEY_NAME.pem
          chmod 400 $KEY_NAME.pem
          echo "KEY_NAME=$KEY_NAME" >> $GITHUB_ENV

      - name: Upload Private Key
        uses: actions/upload-artifact@v4
        with:
          name: ec2-private-key
          path: ${{ env.KEY_NAME }}.pem

      - name: Get Ubuntu AMI
        run: |
          AMI_ID=$(aws ec2 describe-images --owners 099720109477 --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" --query 'Images|sort_by(@, &CreationDate)[-1].ImageId' --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Launch EC2 with App + HTTPS
        run: |
          cat <<EOF > user-data.sh
          #!/bin/bash
          apt update -y
          apt install -y nginx nodejs npm curl software-properties-common mongodb
          systemctl enable nginx && systemctl start nginx
          systemctl enable mongod && systemctl start mongod
          add-apt-repository -y ppa:certbot/certbot
          apt update && apt install -y certbot python3-certbot-nginx

          certbot --nginx --non-interactive --agree-tos --email ${{ github.event.inputs.email }} -d ${{ github.event.inputs.domain_name }}

          cd /home/ubuntu
          git clone https://github.com/${{ secrets.GH_USERNAME }}/your-repo-name.git
          cd your-repo-name
          npm install
          npm install -g pm2
          pm2 start server.js --name app
          pm2 save && pm2 startup systemd

          cat <<NGINX > /etc/nginx/sites-available/default
          server {
              listen 80;
              server_name ${{ github.event.inputs.domain_name }};
              return 301 https://\$host\$request_uri;
          }

          server {
              listen 443 ssl;
              server_name ${{ github.event.inputs.domain_name }};
              ssl_certificate /etc/letsencrypt/live/${{ github.event.inputs.domain_name }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${{ github.event.inputs.domain_name }}/privkey.pem;

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          NGINX
          systemctl restart nginx
          EOF

          chmod +x user-data.sh
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --instance-type ${{ github.event.inputs.instance_type }} \
            --key-name $KEY_NAME \
            --security-group-ids $SG_ID \
            --subnet-id $SUBNET_ID \
            --iam-instance-profile Name=$EC2_ROLE_NAME \
            --user-data file://user-data.sh \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ github.event.inputs.instance_name }}}]" \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Launched EC2: $INSTANCE_ID"
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          echo "âœ… EC2 is running and app should be live."
