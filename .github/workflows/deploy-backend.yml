name: Deploy Backend and MongoDB to EKS

on:
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      # ‚úÖ Checkout repo
      - uses: actions/checkout@v3

      # ‚úÖ Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ‚úÖ Install eksctl and kubectl
      - name: Install eksctl and kubectl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # ‚úÖ Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ‚úÖ Create ECR Repo if not exists
      - name: Create ECR Repository if not exists
        run: |
          REPO_NAME="backend"
          if ! aws ecr describe-repositories --repository-names $REPO_NAME >/dev/null 2>&1; then
            echo "Creating ECR repository: $REPO_NAME"
            aws ecr create-repository --repository-name $REPO_NAME
          else
            echo "ECR repository $REPO_NAME already exists."
          fi

      # ‚úÖ Build & Push Docker image
      - name: Build and Push Backend Docker image
        run: |
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"
          echo "Building backend image: $BACKEND_IMAGE:$TAG"

          docker build -f vrse-builder-backend-main/Dockerfile \
            -t "$BACKEND_IMAGE:$TAG" \
            -t "$BACKEND_IMAGE:latest" \
            ./vrse-builder-backend-main
          docker push "$BACKEND_IMAGE:$TAG"
          docker push "$BACKEND_IMAGE:latest"

      # ‚úÖ Ensure EKS Cluster
      - name: Ensure EKS Cluster
        run: |
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"
          STACK_NAME="eksctl-${CLUSTER_NAME}-cluster"

          echo "üîç Checking EKS cluster..."
          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "‚úÖ Cluster $CLUSTER_NAME exists."
          elif aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Stack $STACK_NAME exists. Skipping creation."
          else
            echo "üöÄ Creating new EKS cluster: $CLUSTER_NAME..."
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed
          fi

      # ‚úÖ Generate kubeconfig
      - name: Generate kubeconfig
        run: |
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"

          echo "‚åõ Waiting for cluster to be active..."
          aws eks wait cluster-active --name "$CLUSTER_NAME" --region "$REGION"

          echo "üîë Updating kubeconfig..."
          aws eks update-kubeconfig \
            --name "$CLUSTER_NAME" \
            --region "$REGION"

      # ‚úÖ Install Ingress and cert-manager
      - name: Setup Ingress and cert-manager
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace

          kubectl apply --validate=false -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml

      # ‚úÖ Apply HTTPS Configs
      - name: Apply HTTPS ClusterIssuer and Ingress
        working-directory: vrse-builder-backend-main
        run: |
          kubectl apply -f cluster-issuer.yaml
          kubectl apply -f backend-ingress.yaml

      # ‚úÖ Deploy MongoDB
      - name: Deploy MongoDB
        working-directory: vrse-builder-backend-main
        run: |
          kubectl apply -f mongodb-pvc.yaml
          kubectl apply -f mongodb-deployment.yaml
          kubectl apply -f mongodb-service.yaml
          kubectl apply -f mongodb-poddisruptionbudget.yaml
          kubectl apply -f rbac-restrict-delete.yaml

      # ‚úÖ Deploy Backend
      - name: Deploy Backend
        working-directory: vrse-builder-backend-main
        run: |
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/backend"
          TAG="${GITHUB_SHA::7}"
          echo "Deploying backend image: $BACKEND_IMAGE:$TAG"

          # SAFELY replace image line
          sed -i "s|\(image: \).*|\1$BACKEND_IMAGE:$TAG|" backend-deployment.yaml

          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml

      # ‚úÖ Rollout Check
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/backend-deployment
