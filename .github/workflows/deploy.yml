name: AWS Infrastructure Setup

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client Name (used for key pair)'
        required: true
        type: string
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - t3.micro
          - t3.small
          - t3.medium
          - t3.large
      instance_name:
        description: 'EC2 Instance Name Tag'
        required: true
        default: 'CodeDeploy-Instance'
        type: string
      domain_name:
        description: 'Domain name pointing to Elastic IP'
        required: true
        type: string
      email:
        description: 'Email for SSL certificate registration'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  EC2_ROLE_NAME: EC2-CodeDeploy-Role
  SECURITY_GROUP_NAME: CodeDeploy-Security-Group

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure default VPC and subnet
      id: ensure-default
      run: |
        set -e
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query 'Vpcs[0].VpcId' --output text)
        SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0].SubnetId' --output text)
        echo "DEFAULT_VPC_ID=$VPC_ID" >> $GITHUB_OUTPUT
        echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_OUTPUT

    - name: Create EC2 IAM Role and Instance Profile
      id: ec2-role
      run: |
        echo '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ec2.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }' > trust-policy.json

        if ! aws iam get-role --role-name ${{ env.EC2_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-role --role-name ${{ env.EC2_ROLE_NAME }} --assume-role-policy-document file://trust-policy.json
          aws iam attach-role-policy --role-name ${{ env.EC2_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        fi

        if ! aws iam get-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} >/dev/null 2>&1; then
          aws iam create-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }}
          aws iam add-role-to-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} --role-name ${{ env.EC2_ROLE_NAME }}
        fi

        PROFILE_ARN=$(aws iam get-instance-profile --instance-profile-name ${{ env.EC2_ROLE_NAME }} --query 'InstanceProfile.Arn' --output text)
        echo "PROFILE_ARN=$PROFILE_ARN" >> $GITHUB_OUTPUT

    - name: Create Security Group
      id: create-sg
      run: |
        VPC_ID="${{ steps.ensure-default.outputs.DEFAULT_VPC_ID }}"
        SG_ID=$(aws ec2 create-security-group \
          --group-name ${{ env.SECURITY_GROUP_NAME }} \
          --description "Security group for CodeDeploy" \
          --vpc-id $VPC_ID \
          --query 'GroupId' --output text)

        for PORT in 22 80 443 27017; do
          aws ec2 authorize-security-group-ingress --group-id "$SG_ID" --protocol tcp --port $PORT --cidr 0.0.0.0/0
        done
        echo "SECURITY_GROUP_ID=$SG_ID" >> $GITHUB_OUTPUT

    - name: Create EC2 Key Pair
      id: create-key
      run: |
        KEY_NAME="${{ github.event.inputs.client_name }}-key"
        aws ec2 create-key-pair --key-name "$KEY_NAME" --query 'KeyMaterial' --output text > "$KEY_NAME.pem"
        chmod 400 "$KEY_NAME.pem"
        echo "KEY_NAME=$KEY_NAME" >> $GITHUB_OUTPUT

    - name: Upload Private Key
      uses: actions/upload-artifact@v4
      with:
        name: ec2-key
        path: ${{ steps.create-key.outputs.KEY_NAME }}.pem

    - name: Get Latest Ubuntu AMI
      id: get-ami
      run: |
        AMI_ID=$(aws ec2 describe-images \
          --owners 099720109477 \
          --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
          --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' --output text)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT

    - name: Create User Data Script
      run: |
        cat << 'EOF' > user-data.sh
        #!/bin/bash
        apt update -y
        apt install -y nginx certbot python3-certbot-nginx nodejs npm git mongodb jq

        systemctl enable mongod
        systemctl start mongod
        sleep 10
        mongosh <<MONGO
        use admin
        db.createUser({user:"admin", pwd:"admin", roles:["root"]})
        MONGO

        sed -i '/#security:/a\security:\n  authorization: "enabled"' /etc/mongod.conf
        systemctl restart mongod

        npm install -g pm2
        git clone https://github.com/YOUR_ORG/YOUR_REPO.git
        cd YOUR_REPO
        npm install
        pm2 start server.js --name app
        pm2 save
        pm2 startup systemd

        certbot --nginx --non-interactive --agree-tos -d ${{ github.event.inputs.domain_name }} -m ${{ github.event.inputs.email }}
        EOF

    - name: Launch EC2 Instance
      id: launch-ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ steps.get-ami.outputs.AMI_ID }} \
          --count 1 \
          --instance-type ${{ github.event.inputs.instance_type }} \
          --key-name ${{ steps.create-key.outputs.KEY_NAME }} \
          --subnet-id ${{ steps.ensure-default.outputs.SUBNET_ID }} \
          --security-group-ids ${{ steps.create-sg.outputs.SECURITY_GROUP_ID }} \
          --iam-instance-profile Arn=${{ steps.ec2-role.outputs.PROFILE_ARN }} \
          --user-data file://user-data.sh \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ github.event.inputs.instance_name }}}]" \
          --query 'Instances[0].InstanceId' --output text)

        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID

    - name: Allocate and Associate Elastic IP
      run: |
        ALLOC_ID=$(aws ec2 allocate-address --domain vpc --query 'AllocationId' --output text)
        PUBLIC_IP=$(aws ec2 describe-addresses --allocation-ids $ALLOC_ID --query 'Addresses[0].PublicIp' --output text)
        aws ec2 associate-address \
          --instance-id ${{ steps.launch-ec2.outputs.INSTANCE_ID }} \
          --allocation-id $ALLOC_ID

        echo "::notice title=DNS Setup::Map A-record '${{ github.event.inputs.domain_name }}' â†’ $PUBLIC_IP"
        echo "EC2 Instance ID: ${{ steps.launch-ec2.outputs.INSTANCE_ID }}"
        echo "Elastic IP: $PUBLIC_IP"
