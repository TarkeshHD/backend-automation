name: Deploy Backend and MongoDB to EKS with Dashboard + AWS Auth

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      EKS_CLUSTER_NAME: Backend-cluster
      DOMAIN_NAME: poc-api.autovrse.app
      ECR_REPO_NAME: backend
      IMAGE_TAG: latest

    steps:
    # âœ… Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # âœ… Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # âœ… Install eksctl & kubectl
    - name: Install eksctl & kubectl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_linux_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin

        curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    # âœ… ECR Login
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # âœ… Create ECR Repo if not exists
    - name: Ensure ECR Repo
      run: |
        if ! aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" > /dev/null 2>&1; then
          aws ecr create-repository --repository-name "$ECR_REPO_NAME"
        fi

    # âœ… Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME:$IMAGE_TAG"
        docker build -t "$IMAGE_URI" ./vrse-builder-backend-main
        docker push "$IMAGE_URI"

    # âœ… Setup kubeconfig for EKS
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

    # âœ… Deploy MongoDB PVC and Backend
    - name: Deploy MongoDB and Backend
      working-directory: vrse-builder-backend-main
      run: |
        kubectl apply -f mongodb-pvc.yaml
        sed -i "s|image: .*|image: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME:$IMAGE_TAG|" backend-deployment.yaml
        kubectl apply -f backend-deployment.yaml
        kubectl apply -f backend-service.yaml

    # âœ… Install NGINX Ingress
    - name: Install NGINX Ingress Controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml
        kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=180s

    # âœ… Install cert-manager
    - name: Install cert-manager
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
        kubectl rollout status deployment cert-manager -n cert-manager --timeout=180s
        kubectl rollout status deployment cert-manager-webhook -n cert-manager --timeout=180s
        kubectl rollout status deployment cert-manager-cainjector -n cert-manager --timeout=180s

    # âœ… Apply ClusterIssuer
    - name: Apply ClusterIssuer
      working-directory: vrse-builder-backend-main
      run: kubectl apply -f cluster-issuer.yaml

    # âœ… Apply Ingress Resource for Backend
    - name: Apply Backend Ingress
      working-directory: vrse-builder-backend-main
      run: kubectl apply -f backend-ingress.yaml

    # âœ… Apply AWS Auth (RBAC for IAM Users)
    - name: Apply aws-auth ConfigMap
      working-directory: vrse-builder-backend-main
      run: kubectl apply -f aws-auth.yaml

    # âœ… Deploy Kubernetes Dashboard
    - name: Deploy Kubernetes Dashboard
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: admin-user
          namespace: kubernetes-dashboard
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: admin-user
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: admin-user
          namespace: kubernetes-dashboard
        EOF

    # âœ… Final Logs
    - name: Done âœ…
      run: |
        echo "ðŸŽ‰ Backend deployed at: https://$DOMAIN_NAME"
        echo "ðŸ“Œ To access Kubernetes Dashboard:"
        echo "1. Run: kubectl proxy"
        echo "2. Open: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"
        echo "3. Run: kubectl -n kubernetes-dashboard create token admin-user"
